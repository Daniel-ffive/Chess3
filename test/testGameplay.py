import unittest

from src.Chess2 import Board


class FoolsMate(unittest.TestCase):
    def setUp(self):
        self.board = Board()
        self.board.move_if_legal("f2", "f3", "white")
        self.board.move_if_legal("e7", "e5", "black")
        self.board.move_if_legal("g2", "g4", "white")
        self.board.move_if_legal("d8", "h4", "black")

    def test_gameEnds_afterFoolsMate(self):
        self.assertEqual("black wins", self.board.result)

    def test_blackWins_afterFoolsMate(self):
        self.assertTrue(self.board.game_ended)
        
    def test_pieceOnCorrectSquares_afterFoolsMate(self):
        self.assertEqual(self.board.a1, "white rook")
        self.assertEqual(self.board.a2, "white pawn")
        self.assertEqual(self.board.a3, "empty")
        self.assertEqual(self.board.a4, "empty")
        self.assertEqual(self.board.a5, "empty")
        self.assertEqual(self.board.a6, "empty")
        self.assertEqual(self.board.a7, "black pawn")
        self.assertEqual(self.board.a8, "black rook")
        self.assertEqual(self.board.b1, "white knight")
        self.assertEqual(self.board.b2, "white pawn")
        self.assertEqual(self.board.b3, "empty")
        self.assertEqual(self.board.b4, "empty")
        self.assertEqual(self.board.b5, "empty")
        self.assertEqual(self.board.b6, "empty")
        self.assertEqual(self.board.b7, "black pawn")
        self.assertEqual(self.board.b8, "black knight")
        self.assertEqual(self.board.c1, "white bishop")
        self.assertEqual(self.board.c2, "white pawn")
        self.assertEqual(self.board.c3, "empty")
        self.assertEqual(self.board.c4, "empty")
        self.assertEqual(self.board.c5, "empty")
        self.assertEqual(self.board.c6, "empty")
        self.assertEqual(self.board.c7, "black pawn")
        self.assertEqual(self.board.c8, "black bishop")
        self.assertEqual(self.board.d1, "white queen")
        self.assertEqual(self.board.d2, "white pawn")
        self.assertEqual(self.board.d3, "empty")
        self.assertEqual(self.board.d4, "empty")
        self.assertEqual(self.board.d5, "empty")
        self.assertEqual(self.board.d6, "empty")
        self.assertEqual(self.board.d7, "black pawn")
        self.assertEqual(self.board.d8, "empty")
        self.assertEqual(self.board.e1, "white king")
        self.assertEqual(self.board.e2, "white pawn")
        self.assertEqual(self.board.e3, "empty")
        self.assertEqual(self.board.e4, "empty")
        self.assertEqual(self.board.e5, "black pawn")
        self.assertEqual(self.board.e6, "empty")
        self.assertEqual(self.board.e7, "empty")
        self.assertEqual(self.board.e8, "black king")
        self.assertEqual(self.board.f1, "white bishop")
        self.assertEqual(self.board.f2, "empty")
        self.assertEqual(self.board.f3, "white pawn")
        self.assertEqual(self.board.f4, "empty")
        self.assertEqual(self.board.f5, "empty")
        self.assertEqual(self.board.f6, "empty")
        self.assertEqual(self.board.f7, "black pawn")
        self.assertEqual(self.board.f8, "black bishop")
        self.assertEqual(self.board.g1, "white knight")
        self.assertEqual(self.board.g2, "empty")
        self.assertEqual(self.board.g3, "empty")
        self.assertEqual(self.board.g4, "white pawn")
        self.assertEqual(self.board.g5, "empty")
        self.assertEqual(self.board.g6, "empty")
        self.assertEqual(self.board.g7, "black pawn")
        self.assertEqual(self.board.g8, "black knight")
        self.assertEqual(self.board.h1, "white rook")
        self.assertEqual(self.board.h2, "white pawn")
        self.assertEqual(self.board.h3, "empty")
        self.assertEqual(self.board.h4, "black queen")
        self.assertEqual(self.board.h5, "empty")
        self.assertEqual(self.board.h6, "empty")
        self.assertEqual(self.board.h7, "black pawn")
        self.assertEqual(self.board.h8, "black rook")


class SheperdsMate(unittest.TestCase):
    def setUp(self):
        self.board = Board()
        self.board.move_if_legal("e2", "e4", "white")
        self.board.move_if_legal("e7", "e5", "black")
        self.board.move_if_legal("f1", "c4", "white")
        self.board.move_if_legal("b8", "c6", "black")
        self.board.move_if_legal("d1", "h5", "white")
        self.board.move_if_legal("g8", "c6", "black")
        self.board.move_if_legal("h5", "f7", "white")

    def test_gameEnds_afterSheperdsMate(self):
        self.assertTrue(self.board.game_ended)

    def test_whiteWins_afterSheperdsMate(self):
        self.assertEqual("white wins", self.board.result)

    def test_pieceOnCorrectSquares_afterFoolsMate(self):
        self.assertEqual(self.board.a1, "white rook")
        self.assertEqual(self.board.a2, "white pawn")
        self.assertEqual(self.board.a3, "empty")
        self.assertEqual(self.board.a4, "empty")
        self.assertEqual(self.board.a5, "empty")
        self.assertEqual(self.board.a6, "empty")
        self.assertEqual(self.board.a7, "black pawn")
        self.assertEqual(self.board.a8, "black rook")
        self.assertEqual(self.board.b1, "white knight")
        self.assertEqual(self.board.b2, "white pawn")
        self.assertEqual(self.board.b3, "empty")
        self.assertEqual(self.board.b4, "empty")
        self.assertEqual(self.board.b5, "empty")
        self.assertEqual(self.board.b6, "empty")
        self.assertEqual(self.board.b7, "black pawn")
        self.assertEqual(self.board.b8, "empty")
        self.assertEqual(self.board.c1, "white bishop")
        self.assertEqual(self.board.c2, "white pawn")
        self.assertEqual(self.board.c3, "empty")
        self.assertEqual(self.board.c4, "white bishop")
        self.assertEqual(self.board.c5, "empty")
        self.assertEqual(self.board.c6, "black knight")
        self.assertEqual(self.board.c7, "black pawn")
        self.assertEqual(self.board.c8, "black bishop")
        self.assertEqual(self.board.d1, "empty")
        self.assertEqual(self.board.d2, "white pawn")
        self.assertEqual(self.board.d3, "empty")
        self.assertEqual(self.board.d4, "empty")
        self.assertEqual(self.board.d5, "empty")
        self.assertEqual(self.board.d6, "empty")
        self.assertEqual(self.board.d7, "black pawn")
        self.assertEqual(self.board.d8, "black queen")
        self.assertEqual(self.board.e1, "white king")
        self.assertEqual(self.board.e2, "empty")
        self.assertEqual(self.board.e3, "empty")
        self.assertEqual(self.board.e4, "white pawn")
        self.assertEqual(self.board.e5, "black pawn")
        self.assertEqual(self.board.e6, "empty")
        self.assertEqual(self.board.e7, "empty")
        self.assertEqual(self.board.e8, "black king")
        self.assertEqual(self.board.f1, "empty")
        self.assertEqual(self.board.f2, "white pawn")
        self.assertEqual(self.board.f3, "empty")
        self.assertEqual(self.board.f4, "empty")
        self.assertEqual(self.board.f5, "empty")
        self.assertEqual(self.board.f6, "empty")
        self.assertEqual(self.board.f7, "white queen")
        self.assertEqual(self.board.f8, "black bishop")
        self.assertEqual(self.board.g1, "white knight")
        self.assertEqual(self.board.g2, "white pawn")
        self.assertEqual(self.board.g3, "empty")
        self.assertEqual(self.board.g4, "empty")
        self.assertEqual(self.board.g5, "empty")
        self.assertEqual(self.board.g6, "empty")
        self.assertEqual(self.board.g7, "black pawn")
        self.assertEqual(self.board.g8, "black knight")
        self.assertEqual(self.board.h1, "white rook")
        self.assertEqual(self.board.h2, "white pawn")
        self.assertEqual(self.board.h3, "empty")
        self.assertEqual(self.board.h4, "empty")
        self.assertEqual(self.board.h5, "empty")
        self.assertEqual(self.board.h6, "empty")
        self.assertEqual(self.board.h7, "black pawn")
        self.assertEqual(self.board.h8, "black rook")

if __name__ == '__main__':
    unittest.main()
